name: 'formatting'
description: 'CI formatting check'
inputs:
  path:
    description: 'Path to repository folder to run formatting check for.'
    required: false
    default: ./
  exclude-files:
    description: 'List of comma-separated files to exclude from the formatting check. Eg file1, file2'
    required: false
  exclude-dirs:
    description: 'List of comma-separated directories to exclude from the formatting check. Eg docs, build'
    required: false
  include-extensions:
    description: 'List of comma-separated extensions to add to the formatting check. Eg md, dox'
    required: false

runs:
  using: "composite"
  steps:
    - env:
        # At time of writing, you can't add a global environment
        # to an action file so stuck with this. If this gets changed
        # Please move this
        bashPass: \033[32;1mPASSED -
        bashInfo: \033[33;1mINFO -
        bashFail: \033[31;1mFAILED -
        bashEnd:  \033[0m
        stepName: Install Uncrustify
      name: ${{ env.stepName }}
      shell: bash
      run: |
        # ${{ env.stepName }}
        echo -e "::group::${{ env.bashInfo }} ${{ env.stepName }} ${{ env.bashEnd }}"

        sudo apt-get install uncrustify fd-find dos2unix
        echo "$GITHUB_ACTION_PATH" >> $GITHUB_PATH
        export PATH="$PATH:$GITHUB_ACTION_PATH"

        # Check that the commands installed correctly
        fdfind --version
        echo -e "::endgroup::"

        echo -e "${{ env.bashInfo }} Using Uncrustify Version: "$(uncrustify --version)" ${{ env.bashEnd }}"
        echo -e "${{ env.bashPass }} ${{ env.stepName }} ${{ env.bashEnd }}"

    - env:
        bashPass: \033[32;1mPASSED -
        bashInfo: \033[33;1mINFO -
        bashFail: \033[31;1mFAILED -
        bashEnd:  \033[0m
        stepName: Formatting Check
      name: ${{ env.stepName }}
      id: action-formatting-check
      working-directory: ${{ inputs.path }}
      shell: bash
      run: |
        # ${{ env.stepName }}
        echo -e "::group::${{ env.bashInfo }} ${{ env.stepName }} ${{ env.bashEnd }}"

        exitCode=0
        export PATH="$PATH:$GITHUB_ACTION_PATH"

        # Parse the optional inputs
        args=""

        # fd-find uses -E to exclude a file or directory
        if [ -n "${{ inputs.exclude-dirs }}" ]; then
          dirs=" -E "
          dirs+="${{ inputs.exclude-dirs }}"
          dirs="${dirs//,/ -E }"
          args+=" ${dirs}"
        fi

        # fd-find uses -E to exclude a file or directory
        if [ -n "${{ inputs.exclude-files }}" ]; then
          files=" -E "
          files+="${{ inputs.exclude-files }}"
          files="${files//,/ -E }"
          args+=" ${files}"
        fi

        # fd-find uses -e to include a file extension
        if [ -n "${{ inputs.include-file-types }}" ]; then
          file_types=" -e "
          file_types+="${{ inputs.include-file-types }}"
          file_types="${file_types//,/ -e }"
          args+=" ${file_types}"
        fi

        # Get all .c and .h files, as well as any other requested file types.
        # Then run uncrustify with the common config file.

        echo -e "${{ env.bashInfo }} fdfind -e c -e h ${args} --exec uncrustify --no-backup --replace --if-changed -c https://github.com/FreeRTOS/CI-CD-Github-Actions/blob/main/formatting/uncrustify.cfg -l C ${{ env.bashEnd }}"
        fdfind -e c -e h ${args} --exec uncrustify -q --no-backup --replace --if-changed -c $GITHUB_ACTION_PATH/uncrustify.cfg -l C

        # Replace all trailing whitespace, exclude photo and binary files
        echo -e "${{ env.bashInfo }} Check for Trailing Whitespace ${{ env.bashEnd }}"
        echo -e "${{ env.bashInfo }} fdfind --type=file -E '*.png' -E '*.jpg' -E '*.svg' -E '*.a' -E '*.lib' -E '*.patch' ${args} . --exec sed -Ei 's/[[:blank:]]+$//' ${{ env.bashEnd }}"
        fdfind --type=file -E '*.png' -E '*.jpg' -E '*.svg' -E '*.a' -E '*.lib' -E '*.patch' ${args} . --exec sed -Ei 's/[[:blank:]]+$//'

        # Replace all line endings with LF ones instead of CRLF
        echo -e "${{ env.bashInfo }} Check for CRLF Line Endings ${{ env.bashEnd }}"
        echo -e "${{ env.bashInfo }} fdfind --type=file ${args} . --exec dos2unix ${{ env.bashEnd }}"
        fdfind --type=file ${args} . --exec dos2unix -q

        # Determine if there was a formatting diff.
        # If there was, create a patch of it.
        set +e
        git diff --exit-code >> formattingChanges.patch
        exitCode=$?
        set -e

        if [ $exitCode -eq 0 ]; then
            echo -e "::endgroup::"
            echo -e "${{ env.bashPass }} ${{ env.stepName }} ${{ env.bashEnd }}"
        else
            # Run a git diff to print the formatting differences
            echo -e "::group::${{ env.bashInfo }} Format Difference ${{ env.bashEnd }}"
            git diff --color=always
            echo -e "::endgroup::${{ env.bashFail }} List of files with formatting errors: ${{ env.bashEnd }}"
            echo -e "${{ env.bashFail }} "$(git diff --name-only)" ${{ env.bashEnd }} "
            echo -e "${{ env.bashFail }} ${{ env.stepName }} ${{ env.bashEnd }}"
        fi
        exit $exitCode

    - name: Upload Formatting Git Patch
      if: failure() && ( steps.action-formatting-check.outcome == 'failure' )
      id: upload-formatting-patch
      uses: actions/upload-artifact@v3
      with:
        name: formattingChanges
        path: ${{ inputs.path }}/formattingChanges.patch
        retention-days: 7

    - env:
        bashPass: \033[32;1m
        bashInfo: \033[33;1m
        bashFail: \033[31;1m
        bashEnd:  \033[0
        stepName: Formatting Git Patch Info
      if: failure() && ( steps.upload-formatting-patch.outcome == 'success' )
      shell: bash
      run: |
        # ${{ env.stepName }}
        echo -e "${{ env.bashInfo }} A git patch of the formatting issues has been attached to this workflow ${{ env.bashEnd }}"
        echo -e "${{ env.bashInfo }} This can be accessed by returning to the bottom of the summary page of the workflow run ${{ env.bashEnd }}"
        echo -e "${{ env.bashInfo }} At the bottom of the page will be a formattingChanges.zip file that you can download. ${{ env.bashEnd }}"
        echo -e "${{ env.bashInfo }} Extract the 'formattingChanges.patch' file inside of it, and copy it to your repository. ${{ env.bashEnd }}"
        echo -e "${{ env.bashInfo }} From here you can apply it using 'git apply formattingChanges.patch', fixing your formatting issues. ${{ env.bashEnd }}"
        echo -e "${{ env.bashInfo }} Or you can add the comment '/bot run formatting' on your Pull Request to have formatting changes automatically applied to your PR! ${{ env.bashEnd }}"
