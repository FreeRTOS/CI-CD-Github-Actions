name: 'Generate memory estimates'
description: 'Generate library size tables for doxygen.'
inputs:
  path:
    description: 'Path to library directory.'
    required: false
    default: ./
  config:
    description: 'JSON config file containing library information to be used for memory estimation.'
    required: true
  output:
    description: 'File to write generated table to.'
    required: false
    default: 'size_table.html'
  check_against:
    description: >
        Path to existing memory estimates file to compare with the memory estimates calculated by
        the action. Action will fail if sizes do not match to indicate need for updating size.
    required: false
    default: ''
  toolchain_link:
    description: 'Link to ARM GCC tar.bz2 to use for compiling files (default version 9-2020-q2).'
    required: false
    default: "https://armkeil.blob.core.windows.net/developer/Files/downloads/gnu-rm/9-2020q2/gcc-arm-none-eabi-9-2020-q2-update-x86_64-linux.tar.bz2?revision=05382cca-1721-44e1-ae19-1e7c3dc96118&la=en&hash=D7C9D18FCA2DD9F894FD9F3C3DC9228498FA281A"

runs:
  using: "composite"
  steps:
    - env:
        bashPass: \033[32;1mPASSED -
        bashInfo: \033[33;1mINFO -
        bashFail: \033[31;1mFAILED -
        bashEnd:  \033[0m
        stepName: Install ARM GCC
      shell: bash
      run: |
        # ${{ env.stepName }}
        echo -e "::group::${{ env.bashInfo }} ${{ env.stepName }} ${{ env.bashEnd }}"
        wget -qO- "${{ inputs.toolchain_link }}" | sudo tar --strip-components=1 -xj -C /usr/local
        echo -e "::endgroup::${{ env.bashPass }} ${{ env.stepName }} ${{ env.bashEnd }}"

    - env:
        bashPass: \033[32;1mPASSED -
        bashInfo: \033[33;1mINFO -
        bashFail: \033[31;1mFAILED -
        bashEnd:  \033[0m
        stepName: Compute File Sizes
      working-directory: ${{ inputs.path }}
      shell: bash
      run: |
        # ${{ env.stepName }}
        echo -e "${{ env.bashInfo }} ${{ env.stepName }} ${{ env.bashEnd }}"
        ${{ github.action_path }}/memory_statistics.py --config "${{ inputs.config }}" --output "${{ inputs.output }}"
        echo -e "${{ env.bashPass }} ${{ env.stepName }} ${{ env.bashEnd }}"

    - env:
        bashPass: \033[32;1mPASSED -
        bashInfo: \033[33;1mINFO -
        bashFail: \033[31;1mFAILED -
        bashEnd:  \033[0m
        stepName: Check File Size
      working-directory: ${{ inputs.path }}
      shell: bash
      if: inputs.check_against
      run: |
        # ${{ env.stepName }}
        echo -e "${{ env.bashInfo }} ${{ env.stepName }} ${{ env.bashEnd }}"
        if cmp "${{ inputs.check_against }}" "${{ inputs.output }}" ; then
          echo -e "${{ env.bashPass }} ${{ env.stepName }} ${{ env.bashEnd }}"
            exit 0
        else
            echo -e "::endgroup::${{ env.bashFail }} ${{ env.stepName }} ${{ env.bashEnd }}"
            echo -e "${{ env.bashFail }} Sizes of files from provided ${{ inputs.check_against }} are not equal to current file size! ${{ env.bashEnd }}"
            diff -U 2 "${{ inputs.check_against }}" "${{ inputs.output }}"
            exit 1
        fi
