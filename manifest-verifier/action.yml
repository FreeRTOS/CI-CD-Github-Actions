name: 'verify-manifest'
description: 'Verifies manifest.yml against missing submodule entires and stale version information'
inputs:
  path:
    description: 'Path to repository folder containing manifest.yml to verify.'
    required: false
    default: ./
  exclude-submodules:
    description: 'List of comma-separated relative path to submodules that should not be present in manifest.yml. Eg libraries/thirdparty/tinycbor,libraries/thirdparty/mbedtls'
    required: false
    default: ''
  fail-on-incorrect-version:
    description: 'Boolean flag to indicate if verification should fail if any submodule version in manifest.yml file is incorrect or stale.'
    required: false
    default: 'false'
runs:
  using: "composite"
  steps:
      - env:
          bashPass: \033[32;1mPASSED -
          bashInfo: \033[33;1mINFO -
          bashFail: \033[31;1mFAILED -
          bashEnd:  \033[0m
          stepName: Install Manifest Verification Dependencies
        name: ${{ env.stepName }}
        shell: bash
        run: |
          # ${{ env.stepName }}
          echo "::group::${{ env.stepName }}"
          pip install -r $GITHUB_ACTION_PATH/requirements.txt
          exitStatus=$?
          echo "::endgroup::"
          echo -e "${{ env.bashPass }} ${{ env.stepName }} ${{ env.bashEnd }}"

      - env:
          bashPass: \033[32;1mPASSED -
          bashInfo: \033[33;1mINFO -
          bashFail: \033[31;1mFAILED -
          bashEnd:  \033[0m
          stepName: Run Manifest Verification Script
        name: ${{ env.stepName }}
        working-directory: ${{ inputs.path }}
        shell: bash
        run: |
          # ${{ env.stepName }}
          echo "::group::${{ env.stepName }}"
          if [[ "${{ inputs.fail-on-incorrect-version }}" == "true" ]]; then
            echo -e "${{ env.bashInfo}} Value of flag is ${{ inputs.fail-on-incorrect-version }} ${{ env.bashEnd }}"
            python3 $GITHUB_ACTION_PATH/verify_manifest.py --ignore-submodule-path=${{ inputs.exclude-submodules }} --fail-on-incorrect-version
          else
            python3 $GITHUB_ACTION_PATH/verify_manifest.py --ignore-submodule-path=${{ inputs.exclude-submodules }}
          fi
          exitStatus=$?
          echo "::endgroup::"
          if [ "$exitStatus" = "0" ]; then
            echo -e "${{ env.bashPass }} ${{ env.stepName }} ${{ env.bashEnd }}"
          else
            echo -e "${{ env.bashFail }} ${{ env.stepName }} ${{ env.bashEnd }}"
            exit 1
          fi
